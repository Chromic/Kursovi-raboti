#include <iostream>
#include <string>

using namespace std;

struct Item {
	string naprav;
	string chasizl;
	string chaskac;
	int termizl;
	int termkac;
	char fime[50];
	int mqsto;
	Item *NextByPlace;
};

typedef Item* Point;
Point HeadByPlace, HeadFirstCl, HeadNoSm, HeadSm;

void PrintOut(Point P) {
	while (P) {
		cout << P->mqsto << endl;
		cout << P->naprav << endl;
		cout << P->chasizl << endl;
		cout << P->chaskac << endl;
		cout << P->termizl << endl;
		cout << P->termkac << endl;
		cout << P->fime << endl;
		P = P->NextByPlace;
	}
}

void Traverse(Point P) {
	while (P) {
		if (P->mqsto == P->NextByPlace->mqsto) {
		}
		P = P->NextByPlace;
	}
}

void MergeLists(Item** List1, Item* List2)
{
	Item* ListPtr = *List1;
	if (ListPtr == NULL) {
		*List1 = List2;
	}
	else {
		while (ListPtr->NextByPlace) {
			ListPtr = ListPtr->NextByPlace;
		}
		ListPtr->NextByPlace = List2;
	}
}

void Create(Point &Head, int i) {
	Point P;
	P = new Item;

	P->mqsto = i;
	cout << "Enter destination" << endl;
	cin >> P->naprav;
	cout << "Enter departure HOUR" << endl;
	cin >> P->chasizl;
	cout << "Enter arrival HOUR" << endl;
	cin >> P->chaskac;
	cout << "Enter # of leaving terminal" << endl;
	cin >> P->termizl;
	cout << "Enter # of entering terminal" << endl;
	cin >> P->termkac;
	cout << "Last name of traveler" << endl;
	cin >> P->fime;

	P->NextByPlace = Head;
	Head = P;
}

void Delete(char name[], Point &Head) {
	Point P = Head;
	Point temp;

	if (P != NULL) {
		if (strcmp(P->fime, name) == 0) {
			Head = P->NextByPlace;
			delete P;
			return;
		}
	}
	else {
		return;
	}
	while (P != NULL) {
		temp = P->NextByPlace;
		if (temp != NULL) {
			if (strcmp(temp->fime, name) == 0) {
				P->NextByPlace = temp->NextByPlace;
				delete temp;
				return;
			}
		}
		P = P->NextByPlace;
	}
}

void main() {
	char ch, dfime[50],dfime2[50];
	HeadByPlace = NULL;
	HeadFirstCl = NULL;
	HeadNoSm = NULL;
	HeadSm = NULL;
	int i;
	cout << "New element? (Y/N)? : ";
	cin >> ch;
	while (ch == 'Y' || ch == 'y')
	{
		cout << "Enter seat #: ";
		cin >> i;
		if (i < 7) Create(HeadFirstCl, i);
		else if (i > 7 && i < 25) Create(HeadNoSm, i);
		else if (i > 25) Create(HeadSm, i);
		cout << " New element? (Y/N) ?: ";
		cin >> ch;

	}

	MergeLists(&HeadByPlace, HeadFirstCl);
	MergeLists(&HeadByPlace, HeadNoSm);;
	MergeLists(&HeadByPlace, HeadSm);
	//PrintOut(HeadFirstCl);
	//PrintOut(HeadNoSm);
	//PrintOut(HeadSm);
	PrintOut(HeadByPlace);

	cout << "Which passengers ticket do you want removed? (Enter last name)";
	cin >> dfime;
	Delete(dfime, HeadByPlace);
	PrintOut(HeadFirstCl);

	cout << "First class passengers"<<endl;
	PrintOut(HeadFirstCl);
	cout << "Busines class for non smokers passangers" << endl;
	PrintOut(HeadNoSm);
	cout << "Business class for smokers passengers"<<endl;
	PrintOut(HeadSm);
	system("pause");
}
